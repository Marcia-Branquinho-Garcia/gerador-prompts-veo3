import { GoogleGenAI, Type } from "@google/genai";
import type { GeneratedPrompts } from '../types';

// 1. Verifica se a chave est√° carregada
const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
if (!apiKey) {
  throw new Error("‚ùå Chave de API n√£o encontrada! Verifique o arquivo .env na raiz do projeto.");
}

console.log("‚úÖ Chave de API carregada com sucesso.");

// 2. Inicializa o cliente da API
const ai = new GoogleGenAI({ apiKey });

// 3. Define o schema (sem altera√ß√µes)
const promptSchema = {
  type: Type.OBJECT,
  properties: {
    prompt_pt: {
      type: Type.STRING,
      description: "Um prompt de v√≠deo extremamente detalhado em portugu√™s do Brasil. Deve incluir estilo visual, atmosfera, descri√ß√µes de cena, √¢ngulos de c√¢mera e movimentos, e detalhes de ilumina√ß√£o. Deve ser narrativo e evocativo."
    },
    prompt_en: {
      type: Type.STRING,
      description: "A tradu√ß√£o exata e fiel do 'prompt_pt' para o ingl√™s."
    },
    prompt_json: {
      type: Type.OBJECT,
      description: "Uma estrutura JSON detalhada para automa√ß√£o da gera√ß√£o de v√≠deo (ex: VEO).",
      properties: {
        title: {
          type: Type.STRING,
          description: "Um t√≠tulo curto e impactante para o v√≠deo."
        },
        style: {
          type: Type.STRING,
          description: "O estilo visual geral do v√≠deo (ex: cinematogr√°fico, 8-bit, aquarela, fotorrealista)."
        },
        scenes: {
          type: Type.ARRAY,
          description: "Uma lista de cenas que comp√µem o v√≠deo.",
          items: {
            type: Type.OBJECT,
            properties: {
              description: {
                type: Type.STRING,
                description: "Descri√ß√£o detalhada do que acontece na cena."
              },
              camera_angle: {
                type: Type.STRING,
                description: "O √¢ngulo da c√¢mera (ex: close-up, plano geral, c√¢mera baixa)."
              },
              lighting: {
                type: Type.STRING,
                description: "A ilumina√ß√£o da cena (ex: luz do entardecer, neon, sombrio)."
              },
              duration_seconds: {
                type: Type.NUMBER,
                description: "Dura√ß√£o aproximada da cena em segundos."
              }
            }
          }
        }
      }
    }
  }
};

// 4. Fun√ß√£o principal de gera√ß√£o
export const generatePrompts = async (theme: string): Promise<GeneratedPrompts> => {
  const userPrompt = `
    Com base no seguinte tema, gere os prompts de v√≠deo conforme o schema JSON solicitado.

    O tema √©: "${theme}"

    Instru√ß√µes:
    1. Crie um prompt em portugu√™s (prompt_pt) que seja rico, detalhado e inspirador.
    2. Traduza-o fielmente para o ingl√™s (prompt_en).
    3. Estruture os detalhes do v√≠deo em um formato JSON (prompt_json) claro e √∫til para um sistema automatizado.
  `;

  console.log("üì§ Enviando requisi√ß√£o para a API Gemini...");
  console.log("üìù Tema:", theme);

  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash", // Mantido conforme sua prefer√™ncia
      contents: [{ text: userPrompt }], // Formato correto
      config: {
        responseMimeType: "application/json",
        responseSchema: promptSchema,
      },
    });

    // ‚úÖ CORRE√á√ÉO PRINCIPAL: Verifica√ß√µes de seguran√ßa para evitar erros de "possibly null"
    const candidates = response.candidates;
    if (!candidates || candidates.length === 0) {
      throw new Error("A API n√£o retornou nenhum candidato de resposta.");
    }

    const firstCandidate = candidates[0];
    if (!firstCandidate.content) {
      throw new Error("O candidato retornado n√£o possui conte√∫do.");
    }

    const parts = firstCandidate.content.parts;
    if (!parts || parts.length === 0) {
      throw new Error("O conte√∫do do candidato n√£o possui partes.");
    }

    const firstPart = parts[0];
    if (!firstPart.text) {
      throw new Error("A primeira parte do conte√∫do n√£o possui texto.");
    }

    const responseText = firstPart.text.trim();
    console.log("üìÑ Texto bruto da resposta:", responseText);

    if (!responseText) {
      throw new Error("A API retornou uma resposta vazia.");
    }

    const parsedJson = JSON.parse(responseText);
    console.log("‚úÖ JSON parseado com sucesso:", parsedJson);

    return parsedJson as GeneratedPrompts;

  } catch (error) {
    console.error("‚ùå Erro DETALHADO na chamada da API Gemini:", error);
    const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
    throw new Error(`Falha na comunica√ß√£o com a API Gemini: ${errorMessage}`);
  }
};